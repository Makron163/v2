import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import yt_dlp
import aiofiles
import re
from io import BytesIO
import requests

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = "8063145361:AAHTJ3oudzyAk9zkU6-_FXWzZQkZD6Tbic8"
LOG_CHANNEL = "@anlist12412412sf"
USERS_FILE = "users.json"
STATS_FILE = "stats.json"
ANALYTICS_FILE = "analytics.txt"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ú–µ–Ω—é –±–æ—Ç–∞
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"), KeyboardButton("üì∏ –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ"))

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stat
ALLOWED_USERS = ["@Slam163f"]

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
async def load_json(file_path, default):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
            try:
                return json.loads(await f.read())
            except (json.JSONDecodeError, FileNotFoundError):
                return default
    return default


async def save_json(file_path, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
        await f.write(json.dumps(data, indent=4, ensure_ascii=False))


async def save_analytics_to_file(data):
    """–ó–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
    async with aiofiles.open(ANALYTICS_FILE, 'a', encoding='utf-8') as f:
        await f.write(data + "\n")


# –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def sanitize_filename(filename):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    return re.sub(r'[<>:"/\\|?*]', '', filename).replace(' ', '_')


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    users = await load_json(USERS_FILE, {})
    user_id = str(message.from_user.id)

    if user_id not in users:
        users[user_id] = {
            "username": f"@{message.from_user.username}" if message.from_user.username else "No username",
            "first_name": message.from_user.first_name,
            "date_joined": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_number": len(users) + 1
        }
        await save_json(USERS_FILE, users)
        log_message = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[user_id]['username']}, {users[user_id]['first_name']}"
        await bot.send_message(LOG_CHANNEL, log_message)

    await message.reply('''
    –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º ‚Äî @slam163f
    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å:
    üìπ –í–∏–¥–µ–æ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º 
    TikTok
    YouTube
    Pinterest
    Instagram

    üì∏ –§–æ—Ç–æ –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å Pinterest –∏ Instagram
    ‚ùå –§–æ—Ç–æ —Å TikTok –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

    –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–π

    –í–µ—Ä—Å–∏—è –±–æ—Ç–∞ Beta v1.0
    ''')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
@dp.message_handler(lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
async def ask_video_url(message: types.Message):
    """–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")


@dp.message_handler(lambda message: message.text.startswith("http"))
async def download_video(message: types.Message):
    """–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
    url = message.text.strip()

    await message.reply("‚è≥ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    ydl_opts = {"format": "best", "noplaylist": True}

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            video_url = info.get("url")
            video_title = sanitize_filename(info.get("title", "video"))
            video_size = info.get("filesize", 0)  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if video_size and video_size > 50 * 1024 * 1024:  # 50 –ú–ë –ª–∏–º–∏—Ç
                await message.reply(
                    f"üé• –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n{video_url}"
                )
                return

            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            response = requests.get(video_url)
            video_bytes = BytesIO(response.content)
            video_bytes.seek(0)

            await message.reply_video(
                video_bytes,
                caption=f"üé• –í–∞—à–µ –≤–∏–¥–µ–æ: {video_title}"
            )

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "üì∏ –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ")
async def ask_photo_url(message: types.Message):
    """–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")


@dp.message_handler(lambda message: message.text.startswith("http"))
async def download_photo(message: types.Message):
    """–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
    url = message.text.strip()

    try:
        response = requests.get(url)
        if response.status_code == 200:
            photo_bytes = BytesIO(response.content)
            await message.reply_photo(photo_bytes, caption="üì∏ –í–∞—à–µ —Ñ–æ—Ç–æ.")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /stat
@dp.message_handler(commands=["stat"])
async def stat_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stat"""
    if message.from_user.username not in ALLOWED_USERS:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    stats = await load_json(STATS_FILE, {})
    total_users = len(await load_json(USERS_FILE, {}))
    video_downloads = sum(user.get("video", 0) for user in stats.values())
    photo_downloads = sum(user.get("photo", 0) for user in stats.values())

    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_downloads}\n"
        f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_downloads}"
    )

    await message.reply(stats_message)
    await bot.send_message(LOG_CHANNEL, stats_message)


# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
